==Design principles==

The CROP Editor is designed to simplify the creation of CROP Learning Objects, respecting the Leaners' goals. The following checklist identifies some core principles and practices to assist Authors to produce Objects that are appropriate in particular set of circumstances and prompt to changes.

* The use of one educational objective. CROP Objects have a specific and well-defined purpose, i.e. their target Concept. Having one target Concept encourages the construction of relatively small and self-contained Objects rather than large and cumbersome Objects. Cohesive Objects can easily be changed without affecting the rest composite Object, can easily be sequenced and reused across a Domain. 
* The use of some prerequisite-of Concepts. In Concept Graph of composite Objects, each Concept has some prerequisite-of dependencies with other Concepts. Consequently, each Object is a set of cooperating Objects, each of which implements functionality independent of the others. Redundant associations can be avoided when Authors consider keeping low the number of Objects that will be affected when one Object change its content. 
* The Content ontology should match both domain and learning task. Content ontology should describe courses' entities and their relation given the purpose of teaching and of interoperability across a Learning Domain. 
* The KRC Node is a self-contained teaching action targeting a single Concept. Learners that successfully execute all the contained Objects eventually acquire the target Concept. Objects contained in the set should avoid repeat the same content. A Concept in the Concept Ontology can be defined as equivalent of a disjunction of a set of Concepts, e.g. ComplexNumber Operation can be a disjunction of Conjuration &Lamda; Division &Lamda; Addition &Lamda; Multiplication &Lamda; Substruction. Thus a KRC Node that is associated to Operation can contain Objects with target Concept Operation or Conjuration, or Division or Addition or Multiplication or Substruction.
* The use of some Execution Models. Each Object is associated to one or more Execution Model that ultimate on a different learning experience. It provides one type of adaptation based on Dialogues, Controls and the ordering of Learning Acts. The XModel can implement specific instructional strategies that later can be combined with Learner Model.

Generally, there is no one correct way to model a Learning Object. There are always viable alternatives. The most appropriate solution depends on the type of Learner that Authors have in mind and the extensions that they anticipate. Also, Learning Object development is an iterative process. 